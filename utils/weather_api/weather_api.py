from pprint import pprint
import datetime
import requests
from google_trans_new import google_translator
from config import *
import unicodedata

weather_emoji = {
    "drizzle":"‚òî",
    "thermometer" : "üå°",
    "clear sky": "üåû",
    "few clouds": "üå§",
    "scattered clouds": "‚õÖ",
    "broken clouds": "üå•",
    "overcast clouds": "‚òÅ",
    "light thunderstorm": "üå©",
    "thunderstorm": "üå©",
    "heavy thunderstorm": "üå©",
    "ragged thunderstorm": "üå©",
    "thunderstorm with light rain": "‚õà",
    "thunderstorm with rain": "‚õà",
    "thunderstorm with heavy rain": "‚õà",
    "thunderstorm with light drizzle": "‚õà",
    "thunderstorm with drizzle": "‚õà",
    "thunderstorm with heavy drizzle": "‚õà",
    "rain": "üåß",
    "snow": "üå®",
    "fog" : "üå´",
    "mist": "üå´",
    "smoke": "üå´",
    "haze": "üå´",
    "Sand": "üå´",
    "dust": "üå´",
    "ash": "üåã",
    "squall": "üí®",
    "tornado": "üå™",
}

Translator = google_translator()


def get_smile(temp):
    if temp >= 27:
        return "ü•µ"
    if 27 > temp > 0:
        return "‚ò∫"
    if temp <= 0:
        return "ü•∂"


def city_checker(city, open_weather_token = open_weather_token):
    city = city.replace(" ", "")
    print(f"city = \"{city}\"")
    r = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric"
    )
    data = r.json()
    if data['cod'] == "404":
        return False

    return True


def get_weather(city, open_weather_token = open_weather_token):
        city = city.replace(" ","")

        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric"
        )
        data = r.json()
        print(f"city = \"{city}\"")
        pprint(data)
        city = data["name"]
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        sunrise = data["sys"]["sunrise"]
        sunrise = datetime.datetime.fromtimestamp(sunrise).time()
        sunset = data["sys"]["sunset"]
        sunset = datetime.datetime.fromtimestamp(sunset).time()
        clouds = data["clouds"]["all"]
        description = data["weather"][0]["description"]
        main = data["weather"][0]["main"].lower()
        emoji = weather_emoji.get(description, weather_emoji.get(main))
        wind_speed = data["wind"]["speed"]
        wind_gust = data["wind"].get("gust", wind_speed)

        city_t = Translator.translate(city, lang_src='en', lang_tgt='uk')
        description_t = Translator.translate(description, lang_src='en', lang_tgt='uk')

        message = f"{city_t}:\n" \
                  f"{emoji} –ó–∞ –≤—ñ–∫–Ω–æ–º —Å—å–æ–≥–æ–¥–Ω—ñ {description_t}\n" \
                  f"üåá –°–≤—ñ—Ç–∞–Ω–æ–∫ —Ç–∞ –∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è:<i>{sunrise} - {sunset}</i>\n" \
                  f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è {temp}‚ÑÉ, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels_like}‚ÑÉ {get_smile(feels_like)}\n" \
                  f"üí® –í—ñ—Ç–µ—Ä –¥–º—É—Ö–∞—î –∑—ñ —à–≤–∏–¥–∫—ñ—Å—Ç—é {wind_speed} –º\\—Å, –ø–æ—Ä–∏–≤–∏ —Å—è–≥–∞—é—Ç—å {wind_gust}" \

        if data["sys"]["country"] == "UA":
            message += "\nC–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñüá∫üá¶"
        if data["sys"]["country"] == "RU":
            message += "\n–ø—É—Ç—ñ–Ω—Å—å–∫–∏–π —Ä–µ–∂–∏–º –≤—Å–µ-—â–µ –∑–Ω–∏—â—É—î –µ–∫–æ–Ω–æ–º—ñ–∫—É —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞"

        return message

if __name__ == "__main__":
    get_weather('kyiv',open_weather_token)